---
import type { HTMLAttributes } from 'astro/types';
import { imageSize } from 'image-size';
import { Env } from '@/constants/env';
import { assetPath, getFileData } from '@/helper/node/path';
export type Props = {
  srcPc: string;
  srcSp: string;
  pictureProps?: HTMLAttributes<'picture'>;
  imageProps?: Omit<HTMLAttributes<'img'>, 'src'>;
};
const { srcPc, srcSp, imageProps, pictureProps } = Astro.props;
const sizePc = imageSize(assetPath(srcPc));
const dataPc = getFileData(srcPc);
const sizeSp = imageSize(assetPath(srcSp));
const dataSp = getFileData(srcSp);

const attrPc: Omit<HTMLAttributes<'img'>, 'src'> = {
  width: sizePc.width,
  height: sizePc.height,
  alt: '',
  ...imageProps,
};

const attrSp: HTMLAttributes<'source'> = {
  width: sizeSp.width,
  height: sizeSp.height,
  media: `(max-width: ${Env.breakpoints.sp}px)`,
};
---

<picture {...pictureProps}>
  {
    dataSp.ext !== '.svg' && (
      <source
        media={attrSp.media}
        srcset={`${dataSp.assetDir}/${dataSp.name}.avif`}
        width={attrSp.width}
        height={attrSp.height}
        type="image/avif"
      />
    )
  }
  <source srcset={`${dataSp.assetDir}/${dataSp.name}${dataSp.ext}`} {...attrSp} />

  {
    dataPc.ext !== '.svg' && (
      <source
        srcset={`${dataPc.assetDir}/${dataPc.name}.avif`}
        width={attrPc.width}
        height={attrPc.height}
        type="image/avif"
      />
    )
  }
  <img src={`${dataPc.assetDir}/${dataPc.name}${dataPc.ext}`} decoding="async" {...attrPc} />
</picture>
