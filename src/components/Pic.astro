---
import fs from 'node:fs';
import type { HTMLAttributes } from 'astro/types';
import { imageSize } from 'image-size';
import { assetPath, getFileData } from '@/helper/node/path';
import { breakpoints } from '@root/project.config';
export interface Props {
  srcPc: string;
  srcSp: string;
  pictureProps?: HTMLAttributes<'picture'>;
  imageProps?: Omit<HTMLAttributes<'img'>, 'src'>;
}
const { srcPc, srcSp, imageProps, pictureProps } = Astro.props;
const buffers = {
  pc: fs.readFileSync(assetPath(srcPc)),
  sp: fs.readFileSync(assetPath(srcSp)),
};
const size = {
  pc: imageSize(buffers.pc),
  sp: imageSize(buffers.sp),
};
const data = {
  pc: getFileData(srcPc),
  sp: getFileData(srcSp),
};

const attrPc: Omit<HTMLAttributes<'img'>, 'src'> = {
  width: size.pc.width,
  height: size.sp.height,
  alt: '',
  ...imageProps,
};

const attrSp: HTMLAttributes<'source'> = {
  width: size.sp.width,
  height: size.sp.height,
  media: `(max-width: ${breakpoints.sp}px)`,
};
---

<picture {...pictureProps}>
  {
    data.sp.ext !== '.svg' && (
      <source
        media={attrSp.media}
        srcset={`${data.sp.assetDir}/${data.sp.name}.avif`}
        width={attrSp.width}
        height={attrSp.height}
        type="image/avif"
      />
    )
  }
  <source srcset={`${data.sp.assetDir}/${data.sp.name}${data.sp.ext}`} {...attrSp} />

  {
    data.pc.ext !== '.svg' && (
      <source
        srcset={`${data.pc.assetDir}/${data.pc.name}.avif`}
        width={attrPc.width}
        height={attrPc.height}
        type="image/avif"
      />
    )
  }
  <img src={`${data.pc.assetDir}/${data.pc.name}${data.pc.ext}`} decoding="async" {...attrPc} />
</picture>
